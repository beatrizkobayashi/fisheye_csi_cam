#!/usr/bin/env python3
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge

class FisheyeUndistort:
    def __init__(self):
        self.bridge = CvBridge()
        
        # Load calibration parameters
        self.K = np.array(rospy.get_param("/fisheye_csi_cam/camera_matrix/data")).reshape(3,3)
        self.D = np.array(rospy.get_param("/fisheye_csi_cam/distortion_coefficients/data"))
        
        # Create Undistortion Maps (pre-compute once)
        self.map1, self.map2 = cv2.fisheye.initUndistortRectifyMap(
            self.K, self.D, np.eye(3), self.K,
            (rospy.get_param("/fisheyecsi_cam/image_width"), rospy.get_param("/fisheye_csi_cam/image_height")),
            cv2.CV_16SC2
        )
        
        # Setup subscribers/publishers
        self.sub = rospy.Subscriber("/fisheye_csi_cam/image_raw", Image, self.image_cb)
        self.pub = rospy.Publisher("image_undistorted", Image, queue_size=10)

    def image_cb(self, msg):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
            undistorted = cv2.remap(cv_image, self.map1, self.map2, interpolation=cv2.INTER_LINEAR)
            self.pub.publish(self.bridge.cv2_to_imgmsg(undistorted, "bgr8"))
        except Exception as e:
            rospy.logerr(e)

if __name__ == '__main__':
    rospy.init_node('fisheye_undistort_node')
    FisheyeUndistort()
    rospy.spin()